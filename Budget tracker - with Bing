var config = {
  budget: 3200, // Monthly budget
  emails: "your email address", // Emails to send alerts to
   microsoftSheetURL: "your google sheet link", // Link to the Google Sheet with Microsoft spend data
  microsoftSheetName: "Sheet1", // Name of the sheet where Microsoft data is stored
  microsoftSpendCell: "B4" // Cell reference where Microsoft spend is stored
};

function getGoogleSpend() {
  // Pull Google Ads spend data for the current month
  var now = new Date();
  var query = `
      SELECT 
      metrics.cost_micros
      FROM customer
      WHERE segments.date BETWEEN '${Utilities.formatDate(new Date(now.getFullYear(), now.getMonth(), 1), "GMT", "yyyy-MM-dd")}' AND '${Utilities.formatDate(now, "GMT", "yyyy-MM-dd")}'
  `;
  
  const report = AdsApp.report(query);
  const rows = report.rows();
  
  var googleSpend = 0;
  while (rows.hasNext()) {
    const row = rows.next();
    googleSpend += row["metrics.cost_micros"] / 1000000; // Convert micros to currency units
  }
  return googleSpend;
}

function getMicrosoftSpend() {
  // Read Microsoft Ads spend data from Google Sheets (Supermetrics source)
  var sheet = SpreadsheetApp.openByUrl(config.microsoftSheetURL).getSheetByName(config.microsoftSheetName);
  var microsoftSpend = sheet.getRange(config.microsoftSpendCell).getValue();
  return microsoftSpend;
}

function main() {
  var now = new Date();
  var firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
  var daysPassed = Math.floor((now - firstDayOfMonth) / (1000 * 60 * 60 * 24));
  var totalDaysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();

  if (daysPassed < 7) {
    Logger.log("Skipping email check, as fewer than 7 days have passed.");
    return;
  }

  // Calculate expected spend based on days passed
  var expectedPercent = daysPassed / totalDaysInMonth;
  var expectedSpend = config.budget * expectedPercent;
  
  // Get spend data from Google Ads and Microsoft Ads
  var googleSpend = getGoogleSpend();
  var microsoftSpend = getMicrosoftSpend();
  
  var totalSpendToDate = googleSpend + microsoftSpend;

  // Determine deviation from expected spend
  var deviationPercent = (totalSpendToDate - expectedSpend) / expectedSpend;
  var account = AdsApp.currentAccount().getName();
  var currency = AdsApp.currentAccount().getCurrencyCode();

  var subject, emailBody;

  if (deviationPercent <= -0.10) {
    subject = `${account} Budget Alert: You are underspending by ${Math.abs(deviationPercent * 100).toFixed(2)}%`;
    emailBody = `
      Your account ${account} is underspending by ${Math.abs(deviationPercent * 100).toFixed(2)}%.
      <p>Expected Spend: ${currency} ${expectedSpend.toFixed(2)}</p>
      <p>Actual Spend (Google + Microsoft): ${currency} ${totalSpendToDate.toFixed(2)}</p>
      <p>Monthly Budget: ${currency} ${config.budget}</p>
      <p>You are underspending. Please raise the daily spend to meet your budget goals.</p>
    `;
  } else if (deviationPercent >= 0.10) {
    subject = `${account} Budget Alert: You are overspending by ${Math.abs(deviationPercent * 100).toFixed(2)}%`;
    emailBody = `
      Your account ${account} is overspending by ${Math.abs(deviationPercent * 100).toFixed(2)}%.
      <p>Expected Spend: ${currency} ${expectedSpend.toFixed(2)}</p>
      <p>Actual Spend (Google + Microsoft): ${currency} ${totalSpendToDate.toFixed(2)}</p>
      <p>Monthly Budget: ${currency} ${config.budget}</p>
      <p>You are overspending. Start decreasing daily spend to meet the budget goal.</p>
    `;
  }

  if (Math.abs(deviationPercent) >= 0.10) {
    MailApp.sendEmail({
      to: config.emails,
      subject: subject,
      htmlBody: emailBody,
    });
  }
}
